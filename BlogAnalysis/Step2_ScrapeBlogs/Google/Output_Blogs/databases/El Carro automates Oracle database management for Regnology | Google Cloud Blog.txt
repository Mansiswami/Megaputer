Director Cloud Engineering, Regnology Cloud
Software Engineer, Google Cloud
Coming to Las Vegas, April 9–11.
Editor’s Note: Regnology is a global leader in financial and tax regulatory reporting software solutions, servicing regulators and regulated firms whose work involves massive amounts of data and calculations. Keeping pace with that data was a struggle because of their mixed technology stack. Further, their dependence on legacy databases was preventing them from fully realizing the advantages of Google Cloud. El Carro, an open-source Oracle operator for Kubernetes, bridged this gap by automating management of Oracle database instances on Google Kubernetes Engine, thus reducing business cost and effort.
The world of regulatory reporting involves massive amounts of data and countless calculations, which requires significant compute and robust databases. In Regnology’s case, it was further complicated by our reliance on Oracle databases that supported our proprietary, core data engine, Abacus. Our dependence on on-premises databases meant that we were spending a lot of time and resources on basic operations — from scaling and provisioning, to backups, replication, and other lifecycle management tasks.
Regnology did have a working solution that allowed us to access some advantages of Google Cloud — like scalability, interoperability, and flexibility, while maintaining our Oracle database dependency. But this wasn’t an optimal use of our resources and we needed a future-ready solution that would work with our existing setup and run smoothly on Kubernetes. The first step in that journey was bridging our on-premises Oracle databases to the cloud to simplify our Kubernetes operations.
To address Regnology’s key challenges, and heavy scaling needs, we relied on Google Cloud services, using Google Kubernetes Engine (GKE), Compute Engine, Terraform, Helm, and Docker to automate our infrastructure and application instance deployment. Since we needed an Oracle instance for Abacus, we had to build our own lifecycle and Kubernetes deployment management, for which we used Oracle-provided scripts and created our own container images. We had to further write Bash scripts to manage the lifecycle. This approach was resource-intensive and time-consuming, so we turned to El Carro — an open source system that uses the Kubernetes operator pattern to automate provisioning and ongoing operation for databases running in hybrid and multi-cloud environments.
From our previously resource-intensive set up, we’ve moved to our current solution, the Regnology Regulatory Hub (RRH) enabled by El Carro. Powered by Abacus and built on Regnology’s Cloud platform, RCloud, it consists of multiple microservices that are hosted in Google Cloud and use GKE.
El Carro has eliminated the resource- and time-intensive manual Oracle database lifecycle management on Kubernetes for us by:
Using El Carro to manage the life cycles of our Oracle databases allowed us to deliver Rcloud with 30-40% less full-time employees. As our only tool to manage Oracle instances in Google Cloud, El Carro has:
Additionally, the support we received from the El Carro team at Google Cloud allowed us to avoid a live migration. Working collaboratively with them really took the pressure off our team. Overall, because we deployed the solution with RCloud we reduced the full-time employees needed for managed services by a third. This freed up resources to focus on business outcomes rather than routine operational tasks.
By James Groeneveld • 6-minute read
By Subra Chandramouli • 2-minute read
By Alberto Benroubi • 4-minute read
By Sichen Liu • 3-minute read