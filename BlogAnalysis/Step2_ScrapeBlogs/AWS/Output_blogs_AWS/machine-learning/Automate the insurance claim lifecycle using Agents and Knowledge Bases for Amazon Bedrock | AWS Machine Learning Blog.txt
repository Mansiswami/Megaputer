Generative AI agents are a versatile and powerful tool for large enterprises. They can enhance operational efficiency, customer service, and decision-making while reducing costs and enabling innovation. These agents excel at automating a wide range of routine and repetitive tasks, such as data entry, customer support inquiries, and content generation. Moreover, they can orchestrate complex, multi-step workflows by breaking down tasks into smaller, manageable steps, coordinating various actions, and ensuring the efficient execution of processes within an organization. This significantly reduces the burden on human resources and allows employees to focus on more strategic and creative tasks.
As AI technology continues to evolve, the capabilities of generative AI agents are expected to expand, offering even more opportunities for customers to gain a competitive edge. At the forefront of this evolution sits Amazon Bedrock, a fully managed service that makes high-performing foundation models (FMs) from Amazon and other leading AI companies available through an API. With Amazon Bedrock, you can build and scale generative AI applications with security, privacy, and responsible AI. You can now use Agents for Amazon Bedrock and Knowledge Bases for Amazon Bedrock to configure specialized agents that seamlessly run actions based on natural language input and your organization’s data. These managed agents play conductor, orchestrating interactions between FMs, API integrations, user conversations, and knowledge sources loaded with your data.
This post highlights how you can use Agents and Knowledge Bases for Amazon Bedrock to build on existing enterprise resources to automate the tasks associated with the insurance claim lifecycle, efficiently scale and improve customer service, and enhance decision support through improved knowledge management. Your Amazon Bedrock-powered insurance agent can assist human agents by creating new claims, sending pending document reminders for open claims, gathering claims evidence, and searching for information across existing claims and customer knowledge repositories.
The objective of this solution is to act as a foundation for customers, empowering you to create your own specialized agents for various needs such as virtual assistants and automation tasks. The code and resources required for deployment are available in the amazon-bedrock-examples repository.
The following demo recording highlights Agents and Knowledge Bases for Amazon Bedrock functionality and technical implementation details.

Agents and Knowledge Bases for Amazon Bedrock work together to provide the following capabilities:
The following diagram illustrates the solution architecture.

The workflow consists of the following steps:
In the following sections, we discuss the key steps to deploy the solution, including pre-implementation steps and testing and validation.
Prior to creating your agent and knowledge base, it is essential to establish a simulated environment that closely mirrors the existing resources used by customers. Agents and Knowledge Bases for Amazon Bedrock are designed to build upon these resources, using Lambda-delivered business logic and customer data repositories stored in Amazon S3. This foundational alignment provides a seamless integration of your agent and knowledge base solutions with your established infrastructure.
To emulate the existing customer resources utilized by the agent, this solution uses the create-customer-resources.sh shell script to automate provisioning of the parameterized AWS CloudFormation template, bedrock-customer-resources.yml, to deploy the following resources:
AWS CloudFormation prepopulates the stack parameters with the default values provided in the template. To provide alternative input values, you can specify parameters as environment variables that are referenced in the ParameterKey=<ParameterKey>,ParameterValue=<Value> pairs in the following shell script’s aws cloudformation create-stack command.
Complete the following steps to provision your resources:
The preceding source ./create-customer-resources.sh shell command runs the following AWS Command Line Interface (AWS CLI) commands to deploy the emulated customer resources stack:
Knowledge Bases for Amazon Bedrock uses RAG, a technique that harnesses customer data stores to enhance responses generated by FMs. Knowledge bases allow agents to access existing customer data repositories without extensive administrator overhead. To connect a knowledge base to your data, you specify an S3 bucket as the data source. With knowledge bases, applications gain enriched contextual information, streamlining development through a fully managed RAG solution. This level of abstraction accelerates time-to-market by minimizing the effort of incorporating your data into agent functionality, and it optimizes cost by negating the necessity for continuous model retraining to use private data.
The following diagram illustrates the architecture for a knowledge base with an embeddings model.

Knowledge base functionality is delineated through two key processes: preprocessing (Steps 1-3) and runtime (Steps 4-7):
To create a knowledge base, complete the following steps:
The knowledge base ID and data source ID are used as environment variables in a later step when you deploy the Streamlit web UI for your agent.
Agents operate through a build-time run process, comprising several key components:
The agent in this sample solution uses an Anthropic Claude V2.1 FM on Amazon Bedrock, a set of instructions, three action groups, and one knowledge base.
To create an agent, complete the following steps:
After your agent is created, you will see a green “successfully created” banner.

The following testing procedure aims to verify that the agent correctly identifies and understands user intents for creating new claims, sending pending document reminders for open claims, gathering claims evidence, and searching for information across existing claims and customer knowledge repositories. Response accuracy is determined by evaluating the relevancy, coherency, and human-like nature of the answers generated by Agents and Knowledge Bases for Amazon Bedrock.
User input and agent instruction validation includes the following:
Action group evaluation includes the following:
Knowledge base evaluation includes the following:
The end-to-end testing includes the following:
After setting up your knowledge base in Amazon Bedrock, you can test its behavior directly to assess its responses before integrating it with an agent. This testing process enables you to evaluate the knowledge base’s performance, inspect responses, and troubleshoot by exploring the source chunks from which information is retrieved. Complete the following steps:
You can toggle between generating responses and returning direct quotations in the chat window, and you have the option to clear the chat window or copy all output using the provided icons.
To inspect knowledge base responses and source chunks, you can select the corresponding footnote or choose Show result details. A source chunks window will appear, allowing you to search, copy chunk text, and navigate to the S3 data source.
Following the successful testing of your knowledge base, the next development phase involves the preparation and testing of your agent’s functionality. Preparing the agent involves packaging the latest changes, whereas testing provides a critical opportunity to interact with and evaluate the agent’s behavior. Through this process, you can refine agent capabilities, enhance its efficiency, and address any potential issues or improvements necessary for optimal performance. Complete the following steps:
Make sure to choose Prepare after making changes to apply them before testing the agent.
The following test conversation example highlights the agent’s ability to invoke action group APIs with AWS Lambda business logic that queries a customer’s Amazon DynamoDB table and sends customer notifications using Amazon Simple Notification Service. The same conversation thread showcases agent and knowledge base integration to provide the user with responses using customer authoritative data sources, like claim amount and FAQ documents.

Agent response traces contain essential information to aid in understanding the agent’s decision-making at each stage, facilitate debugging, and provide insights into areas of improvement. The ModelInvocationInput object within each trace provides detailed configurations and settings used in the agent’s decision-making process, enabling customers to analyze and enhance the agent’s effectiveness.
Your agent will sort user input into one of the following categories:
Choose Show trace under a response to view the agent’s configurations and reasoning process, including knowledge base and action group usage. Traces can be expanded or collapsed for detailed analysis. Responses with sourced information also contain footnotes for citations.
In the following action group tracing example, the agent maps the user input to the create-claim action group’s createClaim function during preprocessing. The agent possesses an understanding of this function based on the agent instructions, action group description, and OpenAPI schema. During the orchestration process, which is two steps in this case, the agent invokes the createClaim function and receives a response that includes the newly created claim ID and a list of pending documents.

In the following knowledge base tracing example, the agent maps the user input to Category D during preprocessing, meaning one of the agent’s available functions should be able to provide a response. Throughout orchestration, the agent searches the knowledge base, pulls the relevant chunks using embeddings, and passes that text to the foundation model to generate a final response.

When you are satisfied with the performance of your agent and knowledge base, you are ready to productize their capabilities. We use Streamlit in this solution to launch an example front-end, intended to emulate a production application. Streamlit is a Python library designed to streamline and simplify the process of building front-end applications. Our application provides two features:
To isolate our Streamlit application dependencies and for ease of deployment, we use the setup-streamlit-env.sh shell script to create a virtual Python environment with the requirements installed. Complete the following steps:

To avoid charges in your AWS account, clean up the solution’s provisioned resources
The delete-customer-resources.sh shell script empties and deletes the solution’s S3 bucket and deletes the resources that were originally provisioned from the bedrock-customer-resources.yml CloudFormation stack. The following commands use the default stack name. If you customized the stack name, adjust the commands accordingly.
The preceding ./delete-customer-resources.sh shell command runs the following AWS CLI commands to delete the emulated customer resources stack and S3 bucket:
To delete your agent and knowledge base, follow the instructions for deleting an agent and deleting a knowledge base, respectively.
Although the demonstrated solution showcases the capabilities of Agents and Knowledge Bases for Amazon Bedrock, it’s important to understand that this solution is not production-ready. Rather, it serves as a conceptual guide for customers aiming to create personalized agents for their own specific tasks and automated workflows. Customers aiming for production deployment should refine and adapt this initial model, keeping in mind the following security factors:
For other key considerations, refer to Build generative AI agents with Amazon Bedrock, Amazon DynamoDB, Amazon Kendra, Amazon Lex, and LangChain.
The implementation of generative AI agents using Agents and Knowledge Bases for Amazon Bedrock represents a significant advancement in the operational and automation capabilities of organizations. These tools not only streamline the insurance claim lifecycle, but also set a precedent for the application of AI in various other enterprise domains. By automating tasks, enhancing customer service, and improving decision-making processes, these AI agents empower organizations to focus on growth and innovation, while handling routine and complex tasks efficiently.
As we continue to witness the rapid evolution of AI, the potential of tools like Agents and Knowledge Bases for Amazon Bedrock in transforming business operations is immense. Enterprises that use these technologies stand to gain a significant competitive advantage, marked by improved efficiency, customer satisfaction, and decision-making. The future of enterprise data management and operations is undeniably leaning towards greater AI integration, and Amazon Bedrock is at the forefront of this transformation.
To learn more, visit Agents for Amazon Bedrock, consult the Amazon Bedrock documentation, explore the generative AI space at community.aws, and get hands-on with the Amazon Bedrock workshop.
Kyle T. Blocksom is a Sr. Solutions Architect with AWS based in Southern California. Kyle’s passion is to bring people together and leverage technology to deliver solutions that customers love. Outside of work, he enjoys surfing, eating, wrestling with his dog, and spoiling his niece and nephew.
View Comments